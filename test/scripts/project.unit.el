;; -*- lexical-binding: t -*-
(require 'buttercup)
(require 'lelde/project)
(require 'lelde/test)
(require 'slash-tmp)
(require 'f)
;;(require 'ppp)
(lelde/test::setup-test-environment $T)

(describe "lelde/project empty project (only .gitignore)"
  (let* ((project-path nil)
         (dir-exists nil)
         (pinfo      nil))
    (/tmp/with-temp-dir
      (/tmp/weird-magic-spell)
      (lelde/test/util::test-rsc-untar $T "project/c0000-empty.tar.gz")
      (setq dir-exists   (f-dir-p "c0000.emacs"))
      (setq project-path (f-expand "c0000.emacs/"))
      (setq pinfo (lelde/project::get-project-info "c0000.emacs"))
      )
    ;;(describe (ppp-sexp-to-string pinfo))
    (it "assertions"
      (should dir-exists)
      (should-not (null pinfo))
      (should (string= (plist-get pinfo :name) "c0000.emacs"))
      (should (string= (plist-get pinfo :index) "c0000"))
      (should (string= (plist-get pinfo :project-path) project-path))
      (should (string= (plist-get pinfo :brief) ""))
      (should (string= (plist-get pinfo :commentary) ""))
      (should (null    (plist-get pinfo :files)))
      (should (string= (format "%S" (plist-get pinfo :files-to-update))
                       (format "%S" '("Makefile" "Cask" "recipe/c0000"))))
      (should (stringp (plist-get pinfo :copyright)))
      (should (stringp (plist-get pinfo :author)))
      (should (string= (plist-get pinfo :emacs) emacs-version))
      (should (string= (format "%S" (plist-get pinfo :sources)) "(gnu melpa)"))
      (should (null    (plist-get pinfo :dependency)))
      (should (null    (plist-get pinfo :dev-dependency)))
      (should (string= (plist-get pinfo :test-feature) ""))
      (should (string= (plist-get pinfo :test-runner)  ""))
      (should (string= (plist-get pinfo :test-scripts-dir) "test/scripts"))
      (should (string= (plist-get pinfo :test-scripts-path)
                       (f-expand "test/scripts" project-path)))
      (should (string= (plist-get pinfo :test-lib-dir) "test/lib"))
      (should (string= (plist-get pinfo :test-lib-path)
                       (f-expand "test/lib" project-path)))
      (should (string= (plist-get pinfo :test-rsc-dir) "test/rsc"))
      (should (string= (plist-get pinfo :test-rsc-path)
                       (f-expand "test/rsc" project-path)))
      )))
